AWSTemplateFormatVersion: '2010-09-09'
Description: 'HomeOrder Cognito User Pool with Phone Number Authentication and Google Federation'

Parameters:
  UserPoolName:
    Type: String
    Default: 'homeorder-user-pool'
    Description: 'Name for the Cognito User Pool'

  AppClientName:
    Type: String
    Default: 'homeorder-client'
    Description: 'Name for the Cognito App Client'

  DomainName:
    Type: String
    Default: 'homeorder-auth'
    Description: 'Domain name for Cognito hosted UI'

  AllowedOAuthFlows:
    Type: CommaDelimitedList
    Default: 'code'
    Description: 'Allowed OAuth flows'

  AllowedOAuthScopes:
    Type: CommaDelimitedList
    Default: 'phone,email,openid,profile'
    Description: 'Allowed OAuth scopes'

  CallbackURLs:
    Type: CommaDelimitedList
    Default: 'https://howto-aws.com/auth.html,http://howto-aws.com/auth.html'
    Description: 'Callback URLs for OAuth (comma-separated)'

  LogoutURLs:
    Type: CommaDelimitedList
    Default: 'https://howto-aws.com/,http://howto-aws.com/'
    Description: 'Logout URLs for OAuth (comma-separated)'

  SMSRoleArn:
    Type: String
    Default: ''
    Description: 'ARN of IAM role for SMS sending (leave empty to use Cognito default)'

  MFAConfiguration:
    Type: String
    Default: 'ON'
    AllowedValues: ['OFF', 'ON', 'OPTIONAL']
    Description: 'MFA configuration for the user pool'

  GoogleClientId:
    Type: String
    Default: ''
    Description: 'Google OAuth Client ID for federation'

  GoogleClientSecret:
    Type: String
    Default: ''
    Description: 'Google OAuth Client Secret for federation'

  AllowedOAuthFlowsUserPoolClient:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: 'Enable OAuth flows for user pool client'

Resources:
  # Cognito User Pool
  HomeOrderUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref UserPoolName
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Your HomeOrder verification code is {####}'
          EmailSubject: 'HomeOrder Verification Code'
          SMSMessage: 'Your HomeOrder verification code is {####}'
      
      # Password Policy
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      
      # MFA Configuration
      MfaConfiguration: !Ref MFAConfiguration
      SmsConfiguration:
        SnsRegion: !Ref AWS::Region
        ExternalId: !Sub '${UserPoolName}-external-id'
        SnsCallerArn: !If 
          - HasSMSRole
          - !Ref SMSRoleArn
          - !Sub 'arn:aws:iam::${AWS::AccountId}:role/service-role/Cognito_SMS_Role'
      
      # User Pool Attributes
      Schema:
        - Name: phone_number
          AttributeDataType: String
          Mutable: true
          Required: false  # Make optional to allow Google users without phone
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: given_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: family_name
          AttributeDataType: String
          Mutable: true
          Required: false
        - Name: address
          AttributeDataType: String
          Mutable: true
          Required: false
      
      # Auto Verified Attributes
      AutoVerifiedAttributes:
        - phone_number
        - email
      
      # Username Attributes - Allow both phone and email
      UsernameAttributes:
        - phone_number
        - email
      
      # Device Configuration
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: false
      
      # Email Configuration
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
        From: 'noreply@homeorder.com'
        ReplyToEmailAddress: 'support@homeorder.com'

  # Google Identity Provider (if Google credentials provided)
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Condition: HasGoogleCredentials
    Properties:
      UserPoolId: !Ref HomeOrderUserPool
      ProviderName: 'Google'
      ProviderType: 'Google'
      ProviderDetails:
        client_id: !Ref GoogleClientId
        client_secret: !Ref GoogleClientSecret
        authorize_scopes: 'email profile openid'
      AttributeMapping:
        email: 'email'
        name: 'name'
        given_name: 'given_name'
        family_name: 'family_name'
        # Note: Google doesn't always provide phone_number
        # We'll handle this with Lambda triggers if needed
      IdpIdentifiers:
        - 'Google'

  # Cognito User Pool Domain
  HomeOrderUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref DomainName
      UserPoolId: !Ref HomeOrderUserPool

  # Cognito User Pool Client
  HomeOrderUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Ref AppClientName
      UserPoolId: !Ref HomeOrderUserPool
      GenerateSecret: false
      
      # Authentication Flows
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      
      # OAuth Configuration
      AllowedOAuthFlows: !Ref AllowedOAuthFlows
      AllowedOAuthScopes: !Ref AllowedOAuthScopes
      AllowedOAuthFlowsUserPoolClient: !Ref AllowedOAuthFlowsUserPoolClient
      
      # Callback URLs
      CallbackURLs: !Ref CallbackURLs
      LogoutURLs: !Ref LogoutURLs
      
      # Token Configuration
      AccessTokenValidity: 1
      IdTokenValidity: 1
      RefreshTokenValidity: 30
      TokenValidityUnits:
        AccessToken: hours
        IdToken: hours
        RefreshToken: days
      
      # Security Configuration
      PreventUserExistenceErrors: ENABLED
      EnableTokenRevocation: true
      
      # Supported Identity Providers
      SupportedIdentityProviders: !If 
        - HasGoogleCredentials
        - ['COGNITO', 'Google']
        - ['COGNITO']

  # IAM Role for SMS (if not provided)
  CognitoSMSRole:
    Type: AWS::IAM::Role
    Condition: NoSMSRole
    Properties:
      RoleName: !Sub '${UserPoolName}-sms-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonCognitoIdpSmsRole

  # CloudWatch Log Group for User Pool
  UserPoolLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/cognito/userpool/${HomeOrderUserPool}'
      RetentionInDays: 30

Conditions:
  HasSMSRole: !Not [!Equals [!Ref SMSRoleArn, '']]
  NoSMSRole: !Equals [!Ref SMSRoleArn, '']
  HasGoogleCredentials: !And 
    - !Not [!Equals [!Ref GoogleClientId, '']]
    - !Not [!Equals [!Ref GoogleClientSecret, '']]

Outputs:
  UserPoolId:
    Description: 'Cognito User Pool ID'
    Value: !Ref HomeOrderUserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'
  
  UserPoolArn:
    Description: 'Cognito User Pool ARN'
    Value: !GetAtt HomeOrderUserPool.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolArn'
  
  UserPoolClientId:
    Description: 'Cognito User Pool Client ID'
    Value: !Ref HomeOrderUserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'
  
  UserPoolClientSecret:
    Description: 'Cognito User Pool Client Secret (if generated)'
    Value: !GetAtt HomeOrderUserPoolClient.ClientSecret
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientSecret'
  
  UserPoolDomain:
    Description: 'Cognito User Pool Domain'
    Value: !Ref HomeOrderUserPoolDomain
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolDomain'
  
  UserPoolDomainUrl:
    Description: 'Cognito User Pool Domain URL'
    Value: !Sub 'https://${HomeOrderUserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolDomainUrl'
  
  CognitoRegion:
    Description: 'AWS Region for Cognito'
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-Region'
  
  HostedUIUrl:
    Description: 'Hosted UI Login URL'
    Value: !Sub 'https://${HomeOrderUserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${HomeOrderUserPoolClient}&response_type=code&scope=openid+profile+email+phone&redirect_uri=https://howto-aws.com/auth.html'
    Export:
      Name: !Sub '${AWS::StackName}-HostedUIUrl'
  
  ConfigurationScript:
    Description: 'JavaScript configuration for your app'
    Value: !Sub |
      // Copy this configuration to your auth-script.js file
      const COGNITO_CONFIG = {
          UserPoolId: '${HomeOrderUserPool}',
          ClientId: '${HomeOrderUserPoolClient}',
          Region: '${AWS::Region}',
          Domain: '${HomeOrderUserPoolDomain.Domain}',
          HostedUIUrl: 'https://${HomeOrderUserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${HomeOrderUserPoolClient}&response_type=code&scope=openid+profile+email+phone&redirect_uri=https://howto-aws.com/auth.html'
      };
    Export:
      Name: !Sub '${AWS::StackName}-ConfigScript'
  
  SetupInstructions:
    Description: 'Setup instructions for your application'
    Value: !Sub |
      ## HomeOrder Cognito Setup Complete! ðŸŽ‰
      
      ### Configuration Details:
      - User Pool ID: ${HomeOrderUserPool}
      - Client ID: ${HomeOrderUserPoolClient}
      - Region: ${AWS::Region}
      - Domain: ${HomeOrderUserPoolDomain.Domain}
      - Hosted UI URL: https://${HomeOrderUserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${HomeOrderUserPoolClient}&response_type=code&scope=openid+profile+email+phone&redirect_uri=https://howto-aws.com/auth.html
      
      ### Authentication Options:
      âœ… Phone number + name authentication
      âœ… Google sign-in (if configured)
      âœ… Hosted UI for seamless experience
      
      ### Next Steps:
      1. Update your auth-script.js with the configuration above
      2. Test the hosted UI login flow
      3. Configure Google OAuth (optional)
      4. Deploy your application
      
      ### Test URLs:
      - Auth Domain: https://${HomeOrderUserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com
      - Hosted UI: https://${HomeOrderUserPoolDomain.Domain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${HomeOrderUserPoolClient}&response_type=code&scope=openid+profile+email+phone&redirect_uri=https://howto-aws.com/auth.html
    Export:
      Name: !Sub '${AWS::StackName}-Instructions'
  
  CallbackURLsOutput:
    Description: 'Callback URLs as a comma-separated string'
    Value: !Join [", ", !Ref CallbackURLs]
    Export:
      Name: !Sub '${AWS::StackName}-CallbackURLs'
